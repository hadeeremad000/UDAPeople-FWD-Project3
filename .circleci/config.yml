version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            if [[ -f "~/project/.circleci/outputs/db_migration_success" ]]; then
              npm i
              npm run migration:revert
            fi        

orbs: 
  slack: circleci/slack@4.10.1
jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run Frontend test
          command: |
            cd frontend
            npm install
            npm run test    

  test-backend:
    docker: 
      - image: circleci/node:13.8.0    
    steps:
      - checkout
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
     
  scan-frontend:
    docker: 
      - image: circleci/node:13.8.0    
    steps:
      - checkout
      - run:
          name: Run frontend analyze
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical

  scan-backend:
    docker: 
      - image: circleci/node:13.8.0    
    steps:
      - checkout
      - run:
          name: Run backend analyze
          command: |
            cd backend
            npm install
            npm audit fix
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            #npm audit --audit-level=critical
      - slack/notify:
          channel: D03UMMZD27J
          event: fail
          template: basic_fail_1 

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: create directory for backend URL
          command: |
            mkdir ~/project/.circleci/outputs
            touch ~/project/.circleci/outputs/backend_url.txt
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip           
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text )
            echo "http://$BACKEND_AWS_PUBLIC_IP:3030" >> ~/project/.circleci/outputs/backend_url.txt
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            cat .circleci/outputs/backend_url.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/.circleci/outputs/backend_url.txt            
      - run:
         name: check ip attached
         command: | 
           cat ~/project/.circleci/ansible/inventory.txt
           cat ~/project/.circleci/outputs/backend_url.txt
      - destroy-environment  

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["17:eb:2e:ca:cf:fe:6b:de:08:b8:9f:40:6a:97:10:e6"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
             apk add --update ansible
             apk add tar gzip
      - run:
          name: install awscli
          command: |
             apk add --no-cache \
             python3 \
             py3-pip \
             && pip3 install --upgrade pip \
             && pip3 install \
             awscli \
             && rm -rf /var/cache/apk/*

      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml

      - destroy-environment 

  run-migrations:
    docker:
      - image: circleci/node:12.14.0
    steps:
      - checkout
      - run:
          name: install aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: check migrations_dump
          command: |
            cat ~/project/backend/migrations_dump.txt      
            
      - run:
          name: Send migration results to kvdb
          command: |
            echo "tables have been created successfully"
            # if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            # then
            #   curl https://kvdb.io/2KTssUQxDG7QMa8ygXk5y2/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            # fi              
      - destroy-environment
      - revert_migrations

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            yum  -y update
            yum -y install python3 
            python3 -m pip install --user ansible
            curl -sL https://rpm.nodesource.com/setup_10.x |  bash -
            yum install -y nodejs
            pip3 install ansible         
      - attach_workspace:
          at: ~/                   
      - run:
          name: Get backend url
          command: |
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive 
      #- destroy-environment
      #- revert_migrations             

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]